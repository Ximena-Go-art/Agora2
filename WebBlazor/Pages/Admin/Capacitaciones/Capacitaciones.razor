@page "/capacitaciones"
@inject IGenericService<Capacitacion> _serviceCapacitacion
@inject SweetAlertService _sweetAlertService
@inject NavigationManager _navigationManager


<PageTitle>Capacitaciones</PageTitle>

<h1>Capacitaciones </h1>
@if (capacitaciones==null)
{
    <p><em>Cargando las capacitaciones...</em></p>
}
else if (capacitaciones.Count == 0)
{
    <p><em>No hay capacitaciones registradas.</em></p>
}
else
{
    <NavLink class="btn btn-primary mb-3" href=@($"NuevoEditarCapacitacion")>
        Nueva Capacitacion
    </NavLink>
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Orador/a</th>
                <th>Fecha</th>
                <th colspan="2">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var capacitacion in capacitaciones)
            {
                <tr>
                    <td>@capacitacion.Nombre</td>
                    <td>@capacitacion.Ponente</td>
                    <td>@capacitacion.FechaHora</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteCapacitacion(capacitacion)">Eliminar</button>
                            
                    </td>
                    <td>
                        <NavLink class="btn btn-info" href=@($"NuevoEditarCapacitacion?IdCapacitacion={capacitacion.Id}")>
                            Editar
                        </NavLink>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
    


@code
{
    private List<Capacitacion>? capacitaciones;
    protected override async Task OnInitializedAsync()
    {
        capacitaciones = (await _serviceCapacitacion.GetAllAsync(null))?.ToList();
    } 
    private async Task DeleteCapacitacion(Capacitacion capacitacion)
    {
        var respuesta = await _sweetAlertService.FireAsync (new SweetAlertOptions
        {
            Title = "¿Estás seguro?",
            Text = $"¿Deseas eliminar la capacitación '{capacitacion.Nombre}'?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí, eliminar",
            CancelButtonText = "Cancelar"
        });
        if (respuesta.IsConfirmed)
        {
            if (await _serviceCapacitacion.DeleteAsync(capacitacion.Id))
            {
                await _sweetAlertService.FireAsync("Eliminado", "La capacitación ha sido eliminada.", SweetAlertIcon.Success);
            }
            else
            {
                await _sweetAlertService.FireAsync("Error", "No se pudo eliminar la capacitación.", SweetAlertIcon.Error);
                return;
            }
        }
           
    }
}

    